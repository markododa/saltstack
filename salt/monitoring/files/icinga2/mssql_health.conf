    object CheckCommand "checkmssql_health" {
       import "plugin-check-command"
       timeout = 60
       command = [PluginDir + "/check_mssql_health_pass", "$host.vars.windows_credentials$"]
       arguments = {
       "--commit" = "\\\\"
       "--server" = "$host.address$"
       "--mode" = "$mssqlhealth_mode$"
       "--warning" = "$mssqlhealth_warning$"
       "--critical" = "$mssqlhealth_critical$"
       "--negate" = "$negate$"
       "--nooffline" = ""
        }
       }

    apply Service "mssql_check: connected-users"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "connected-users"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "200"
      vars.mssqlhealth_warning = "150"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: connection-time"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "connection-time"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "5"
      vars.mssqlhealth_warning = "1"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: cpu-busy"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "cpu-busy"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "90"
      vars.mssqlhealth_warning = "80"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: io-busy"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "io-busy"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "90"
      vars.mssqlhealth_warning = "80"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: mem-pool-data-buffer-hit-ratio"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "mem-pool-data-buffer-hit-ratio"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "80:"
      vars.mssqlhealth_warning = "90:"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: free-list-stalls"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "free-list-stalls"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "10"
      vars.mssqlhealth_warning = "4"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: database-free"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "database-free"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "5:"
      vars.mssqlhealth_warning = "10:"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

#    apply Service "mssql_check: failed-jobs"{
#      import "mssql-service"
#      check_command = "checkmssql_health"
#      vars.mssqlhealth_mode = "failed-jobs"
#      display_name = host.address + " : " + vars.mssqlhealth_mode
#      vars.mssqlhealth_critical = "5"
#      vars.mssqlhealth_warning = "1"
#      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
#    }

    apply Service "mssql_check: locks-waits"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "locks-waits"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "500"
      vars.mssqlhealth_warning = "100"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: locks-timeouts"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "locks-timeouts"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "5"
      vars.mssqlhealth_warning = "1"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: locks-deadlocks"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "locks-deadlocks"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "5"
      vars.mssqlhealth_warning = "1"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: sql-recompilations"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "sql-recompilations"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "80"
      vars.mssqlhealth_warning = "40"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: lazy-writes"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "lazy-writes"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "40"
      vars.mssqlhealth_warning = "20"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }



#    apply Service "mssql_check: database-backup-age"{
#      import "mssql-service"
#      check_command = "checkmssql_health"
#      vars.mssqlhealth_mode = "database-backup-age"
#      display_name = host.address + " : " + vars.mssqlhealth_mode
#      vars.mssqlhealth_critical = "48"
#      vars.mssqlhealth_warning = "24"
#      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
#    }

    apply Service "mssql_check: list-databases"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "list-databases"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: list-locks"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "list-locks"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }


    apply Service "mssql_check: transactions"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "transactions"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "50000"
      vars.mssqlhealth_warning = "10000"
      #vars.negate = "unknown=ok"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: total-server-memory"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "total-server-memory"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "100G"
      vars.mssqlhealth_warning = "50G"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: batch-requests"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "batch-requests"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "200"
      vars.mssqlhealth_warning = "100"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

    apply Service "mssql_check: latches-wait-time"{
      import "mssql-service"
      check_command = "checkmssql_health"
      vars.mssqlhealth_mode = "latches-wait-time"
      display_name = host.address + " : " + vars.mssqlhealth_mode
      vars.mssqlhealth_critical = "5"
      vars.mssqlhealth_warning = "3"
      assign where "MSSQL" in host.groups && host.vars.mssql_instances == ""
    }

