# TEST COMMAND
# /usr/lib/nagios/plugins/check_wmi_plus.pl -H 192.168.5.5 -A /etc/icinga2/conf.d/cred_win_standalone.txt -m checktime -w 10

object CheckCommand "check_wmi-standalone" {
import "plugin-check-command"
command = [ "/usr/lib/nagios/plugins/check_wmi_plus.pl" ]

arguments = {
"--inidir" = "$wmi_inidir$"
"-H" = "$host.address$"
"-A" = "$host.vars.wmi_authfile_path$"
"-u" = "$host.vars.wmi_user$"
"-p" = "$host.vars.wmi_pass$"
"-m" = "$check_mode$"
"-s" = "$wmi_submode$"
"-a" = "$wmi_arg1$"
"-o" = "$wmi_arg2$"
"-3" = "$wmi_arg3$"
"-4" = "$wmi_arg4$"
"-y" = "$wmi_delay$"
"-w" = "$wmi_warn$"
"-c" = "$wmi_crit$"
"-exc" = "$wmi_exclude$"
"--nodatamode" = {
set_if = "$wmi_nodatamode$"
}
}

vars.wmi_inidir = "/etc/check_wmi_plus/check_wmi_plus.d"
vars.wmi_nodatamode = false
}


template Service "wmi-service-standalone" {
  import "generic-service"
  check_command =  "check_wmi-standalone"
  check_interval = 3m
  retry_interval = 15m
  max_check_attempts = 3
  event_command = "autoack"
  vars.wmi_authfile_path = "/etc/icinga2/conf.d/cred_win_standalone.txt"

# Edit this file ^ and enter local administrator credentials
# DOMAIN field should exist, value is irelevant
# Fill address field with IP addreses if host can not be found in the DNS server used by va-monitoring
# add registry keys / change permissions 
# serverfault.com/questions/607102/what-is-the-workaround-for-wmi-remote-connection-failure-with-access-denied-erro
}


apply Service "UP Time" {
  import "wmi-service-standalone"
  check_interval = 5m
  retry_interval = 5m

  vars.check_mode = "checkuptime"
  vars.wmi_nodatamode = true
  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "Clock" {
  import "wmi-service-standalone"
  check_interval = 60m
  retry_interval = 60m
  vars.wmi_warn = "100"
  vars.wmi_crit = "300"
  vars.check_mode = "checktime"

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}


apply Service "Disk" {
  import "wmi-service-standalone"
  check_interval = 10m
  retry_interval = 10m
  vars.check_mode = "checkdrivesize"
  vars.wmi_arg1 = "."
  vars.wmi_warn = "95"
  vars.wmi_crit = "98"

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "Memory" {
  import "wmi-service-standalone"
  check_interval = 10m
  retry_interval = 10m
  vars.check_mode = "checkmem"
  vars.wmi_warn = "80"
  vars.wmi_crit = "90"

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "CPU" {
  import "wmi-service-standalone"
  check_interval = 5m
  retry_interval = 10m
  vars.check_mode = "checkcpu"
  vars.wmi_warn = "80"
  vars.wmi_crit = "90"

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "CPU Hungry Apps" {
  import "wmi-service-standalone"
  check_interval = 2m
  retry_interval = 2m
  vars.check_mode = "checkproc"
  vars.wmi_submode = "cpuabove"
  vars.wmi_arg1 = "%"
  vars.wmi_exclude = "_AvgCPU=@0:10"
  vars.wmi_delay = "0"
  vars.wmi_warn = "80"
  vars.wmi_crit = "90"
  vars.wmi_nodatamode = true

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "Swap" {
  import "wmi-service-standalone"

  vars.check_mode = "checkpage"
  vars.wmi_arg1 = "auto"

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}


apply Service "Network Cards" {
  import "wmi-service-standalone"

  vars.check_mode = "checknetwork"
#  vars.wmi_arg1 = "192."
  vars.wmi_arg1 = "."
  vars.wmi_warn = "_SendBytesUtilisation=20"
  vars.wmi_crit = "_SendBytesUtilisation=40"

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "Log: System" {
  import "wmi-service-standalone"

  vars.check_mode = "checkeventlog"
  vars.wmi_arg1 = "system"
  vars.wmi_arg2 = "2"
  vars.wmi_arg3 = "1"
  vars.wmi_warn = "50"
  vars.wmi_crit = "100"

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "Log: Application" {
  import "wmi-service-standalone"

  vars.check_mode = "checkeventlog"
  vars.wmi_arg1 = "application"
  vars.wmi_arg2 = "2"
  vars.wmi_arg3 = "1"
  vars.wmi_warn = "50"
  vars.wmi_crit = "100"

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "Log: Security" {
  import "wmi-service"
  check_interval = 15m
  retry_interval = 5m
  max_check_attempts = 1

  vars.check_mode = "checkeventlog"
  vars.wmi_arg1 = "security"
  vars.wmi_arg2 = ",5"
  vars.wmi_arg3 = "1"
  vars.wmi_warn = "1"
  vars.wmi_crit = "5"
  vars.hidden = "True"
  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "Services" {
  import "wmi-service-standalone"

  vars.check_mode = "checkservice"
  vars.wmi_arg1 = "auto"
  vars.wmi_arg2 = ".net|RemoteRegistry|TrustedInstaller|sppsvc"
  vars.wmi_warn = "3"
  vars.wmi_crit = "5"

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "Some Process" {
  import "wmi-service-standalone"

  vars.check_mode = "checkproc"
  vars.wmi_submode = "count"
  vars.wmi_arg1 = "sbamsvc"
  vars.wmi_warn = "1:1"
  vars.wmi_nodatamode = "32134234"

  assign where host.vars.os == "WindowsDISABLED" && host.vars.standalone == "True"
}

apply Service "Info: OS Version" {
  import "wmi-service-standalone"
  vars.check_mode = "info"
  vars.wmi_submode = "os"
  check_interval = 100m
  retry_interval = 30m

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "Info: Network Adapters" {
  import "wmi-service-standalone"
  check_interval = 10m
  retry_interval = 30m
  vars.check_mode = "info"
  vars.wmi_submode = "net"

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "Info: CPU details" {
  import "wmi-service-standalone"
  check_interval = 100m
  retry_interval = 30m

  vars.check_mode = "info"
  vars.wmi_submode = "cpu"

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "Users" {
  import "wmi-service-standalone"

  vars.check_mode = "checkts"
  vars.wmi_submode = "sessions"
  vars.wmi_warn = "ActiveSessions=1 -w TotalSessions=2"
  vars.wmi_crit = "ActiveSessions=2 -c TotalSessions=2"

  assign where host.vars.os == "WindowsDISABLED" && host.vars.standalone == "True"
}

apply Service "Disk IO C:" {
  import "wmi-service-standalone"

  vars.check_mode = "checkio"
  vars.wmi_submode = "logical"
  vars.wmi_arg1 = "C:"

  assign where host.vars.os == "Windows" && host.vars.standalone == "True"
}

apply Service "IIS: Users" {
  import "wmi-service-standalone"

  vars.check_mode = "checkiis"
  vars.wmi_submode = "users"
  vars.wmi_arg1 = "_Total"

  assign where host.vars.iis_server_standalone == "True"
}

apply Service "IIS: Requests" {
  import "wmi-service-standalone"

  vars.check_mode = "checkiis"
  vars.wmi_submode = "requests"
  vars.wmi_arg1 = "_Total"

  assign where host.vars.iis_server_standalone == "True"
}

apply Service "IIS: Connections" {
  import "wmi-service-standalone"

  vars.check_mode = "checkiis"
  vars.wmi_submode = "connections"
  vars.wmi_arg1 = "_Total"

  assign where host.vars.iis_server_standalone == "True"
}

apply Service "IIS: Errors" {
  import "wmi-service-standalone"

  vars.check_mode = "checkiis"
  vars.wmi_submode = "errors"
  vars.wmi_arg1 = "_Total"

  assign where host.vars.iis_server_standalone == "True"
}

apply Service "MSSQL: General Statistics" {
  import "wmi-service-standalone"

  vars.check_mode = "checksql"
  vars.wmi_submode = "general"
  if (host.vars.mssql_edition == "Express") {
    vars.wmi_arg1 = "MSSQLSQLEXPRESS_MSSQLSQLEXPRESS"
  }

  assign where host.vars.wmi_mssql_server_standalone == "True"
}

apply Service "MSSQL: Buffer Manager" {
  import "wmi-service-standalone"

  vars.check_mode = "checksql"
  vars.wmi_submode = "buffermanager"
  if (host.vars.mssql_edition == "Express") {
    vars.wmi_arg1 = "MSSQLSQLEXPRESS_MSSQLSQLEXPRESS"
  }

  assign where host.vars.wmi_mssql_server_standalone == "True"
}

apply Service "MSSQL: Latch Statistics" {
  import "wmi-service-standalone"

  vars.check_mode = "checksql"
  vars.wmi_submode = "latches"
  if (host.vars.mssql_edition == "Express") {
    vars.wmi_arg1 = "MSSQLSQLEXPRESS_MSSQLSQLEXPRESS"
  }

  assign where host.vars.wmi_mssql_server_standalone == "True"
}

apply Service "MSSQL: Lock Statistics" {
  import "wmi-service-standalone"

  vars.check_mode = "checksql"
  vars.wmi_submode = "locks"
  if (host.vars.mssql_edition == "Express") {
    vars.wmi_arg1 = "MSSQLSQLEXPRESS_MSSQLSQLEXPRESS"
  }

  assign where host.vars.wmi_mssql_server_standalone == "True"
}

apply Service "MSSQL: SQL Statistics" {
  import "wmi-service-standalone"

  vars.check_mode = "checksql"
  vars.wmi_submode = "sqlstats"
  if (host.vars.mssql_edition == "Express") {
    vars.wmi_arg1 = "MSSQLSQLEXPRESS_MSSQLSQLEXPRESS"
  }

  assign where host.vars.wmi_mssql_server_standalone == "True"
}

apply Service "MSSQL: Wait Statistics" {
  import "wmi-service-standalone"

  vars.check_mode = "checksql"
  vars.wmi_submode = "waits"
  if (host.vars.mssql_edition == "Express") {
    vars.wmi_arg1 = "MSSQLSQLEXPRESS_MSSQLSQLEXPRESS"
  }

  assign where host.vars.wmi_mssql_server_standalone == "True"
}

apply Service "MSSQL: Memory Statistics" {
  import "wmi-service-standalone"

  vars.check_mode = "checksql"
  vars.wmi_submode = "memory"
  if (host.vars.mssql_edition == "Express") {
    vars.wmi_arg1 = "MSSQLSQLEXPRESS_MSSQLSQLEXPRESS"
  }

  assign where host.vars.wmi_mssql_server_standalone == "True"
}

apply Service "MSSQL: Cache Statistics" {
  import "wmi-service-standalone"

  vars.check_mode = "checksql"
  vars.wmi_submode = "cache"
  if (host.vars.mssql_edition == "Express") {
    vars.wmi_arg1 = "MSSQLSQLEXPRESS_MSSQLSQLEXPRESS"
  }

  assign where host.vars.wmi_mssql_server_standalone == "True"
}

apply Service "Printers" {
  import "wmi-service-standalone"
  check_interval = 2m
  retry_interval = 1m

  vars.check_mode = "checkprint"
  vars.wmi_submode = "spooler"
  vars.wmi_arg1 = "%"

  assign where host.vars.printserver_standalone == "True"
}
